/** * Questrian * Copyright (c) 2009 John Pavley, http://www.pavley.com * * Permission is hereby granted, free of charge, to any person obtaining * a copy of this software and associated documentation files (the * "Software"), to deal in the Software without restriction, including * without limitation the rights to use, copy, modify, merge, publish, * distribute, sublicense, and/or sell copies of the Software, and to * permit persons to whom the Software is furnished to do so, subject to * the following conditions: * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package {	import flash.display.*;	import flash.events.*;	import com.questrian.*;	/*	A QuestrianApp contains all the game frames.	*/	public class QuestrianApp extends Sprite {		// Friends ---------------------		// Model		private var tank1Mac:StateMachine;		private var dps1Mac:StateMachine;		private var heals1Mac:StateMachine;		// View		private var tank1Frame:CharacterView;		private var dps1Frame:CharacterView;		private var heals1Frame:CharacterView;		// Foes ---------------------		// Model		private var tank2Mac:StateMachine;		private var dps2Mac:StateMachine;		private var heals2Mac:StateMachine;		// View		private var tank2Frame:CharacterView;		private var dps2Frame:CharacterView;		private var heals2Frame:CharacterView;		// Game ---------------------		// Controler		private var questMac:StateMachine;		private var questEngine:GameEngine;		//private var logFrame:LogFrame;		//private var tauntFrame:CommandFrame;		//private var strikeFrame:CommandFrame;		//private var curseFrame:CommandFrame;		//private var healFrame:CommandFrame;		//private var blessFrame:CommandFrame;		//private var monsterUnit:UnitFrame;		//private var tankUnit:UnitFrame;		//private var dpsUnit:UnitFrame;		//private var healsUnit:UnitFrame;		//private var currentMap:MapFrame;		public function QuestrianApp():void {			trace("QuestrianApp()");			this.createFriendsModel();			this.createFriendsView();			this.createFoesModel();			this.createFoesView();			this.createControler();			super();		}		internal function createFriendsModel():void {			this.tank1Mac=new StateMachine(1.1);			this.tank1Mac.putValueByKey("name", "Tank: Sir Roberts ");			this.tank1Mac.putValueByKey("faction", "friend");			this.tank1Mac.putValueByKey("max health", "1000");			this.tank1Mac.putValueByKey("current health", "1000");			this.tank1Mac.putValueByKey("max mana", "100");			this.tank1Mac.putValueByKey("current mana", "100");			this.tank1Mac.putValueByKey("max exp", "100");			this.tank1Mac.putValueByKey("current exp", "1");			this.dps1Mac=new StateMachine(1.2);			this.dps1Mac.putValueByKey("name", "DPS: Mangus Annie ");			this.dps1Mac.putValueByKey("faction", "friend");			this.dps1Mac.putValueByKey("max health", "500");			this.dps1Mac.putValueByKey("current health", "500");			this.dps1Mac.putValueByKey("max mana", "500");			this.dps1Mac.putValueByKey("current mana", "500");			this.dps1Mac.putValueByKey("max exp", "100");			this.dps1Mac.putValueByKey("current exp", "1");			this.heals1Mac=new StateMachine(1.3);			this.heals1Mac.putValueByKey("name", "Heals: Father Dark ");			this.heals1Mac.putValueByKey("faction", "friend");			this.heals1Mac.putValueByKey("max health", "250");			this.heals1Mac.putValueByKey("current health", "250");			this.heals1Mac.putValueByKey("max mana", "1000");			this.heals1Mac.putValueByKey("current mana", "1000");			this.heals1Mac.putValueByKey("max exp", "100");			this.heals1Mac.putValueByKey("current exp", "1");		}		internal function createFoesModel():void {			this.tank2Mac=new StateMachine(2.1);			this.tank2Mac.putValueByKey("name", "Tank: Macabre Kenn ");			this.tank2Mac.putValueByKey("faction", "foe");			this.tank2Mac.putValueByKey("max health", "1000");			this.tank2Mac.putValueByKey("current health", "1000");			this.tank2Mac.putValueByKey("max mana", "100");			this.tank2Mac.putValueByKey("current mana", "100");			this.tank2Mac.putValueByKey("max exp", "100");			this.tank2Mac.putValueByKey("current exp", "1");			this.dps2Mac=new StateMachine(2.2);			this.dps2Mac.putValueByKey("name", "DPS: Zombie Wizard ");			this.dps2Mac.putValueByKey("faction", "foe");			this.dps2Mac.putValueByKey("max health", "500");			this.dps2Mac.putValueByKey("current health", "500");			this.dps2Mac.putValueByKey("max mana", "500");			this.dps2Mac.putValueByKey("current mana", "500");			this.dps2Mac.putValueByKey("max exp", "100");			this.dps2Mac.putValueByKey("current exp", "1");			this.heals2Mac=new StateMachine(2.3);			this.heals2Mac.putValueByKey("name", "Heals: Priestess Po ");			this.heals2Mac.putValueByKey("faction", "foe");			this.heals2Mac.putValueByKey("max health", "250");			this.heals2Mac.putValueByKey("current health", "250");			this.heals2Mac.putValueByKey("max mana", "1000");			this.heals2Mac.putValueByKey("current mana", "1000");			this.heals2Mac.putValueByKey("max exp", "100");			this.heals2Mac.putValueByKey("current exp", "1");		}		internal function createFriendsView():void {			this.tank1Frame=new CharacterView(this.tank1Mac,128,64);			this.tank1Frame.x=0;			this.tank1Frame.y=0;			this.tank1Frame.width=128;			this.tank1Frame.height=64;			addChild(this.tank1Frame);			this.dps1Frame=new CharacterView(this.dps1Mac,128,64);			this.dps1Frame.x=0;			this.dps1Frame.y=64;			this.dps1Frame.width=128;			this.dps1Frame.height=64;			addChild(this.dps1Frame);			this.heals1Frame=new CharacterView(this.heals1Mac,128,64);			this.heals1Frame.x=0;			this.heals1Frame.y=128;			this.heals1Frame.width=128;			this.heals1Frame.height=64;			addChild(this.heals1Frame);		}		internal function createFoesView():void {			this.tank2Frame=new CharacterView(this.tank2Mac,128,64);			this.tank2Frame.x=352;			this.tank2Frame.y=0;			this.tank2Frame.width=128;			this.tank2Frame.height=64;			addChild(this.tank2Frame);			this.dps2Frame=new CharacterView(this.dps2Mac,128,64);			this.dps2Frame.x=352;			this.dps2Frame.y=64;			this.dps2Frame.width=128;			this.dps2Frame.height=64;			addChild(this.dps2Frame);			this.heals2Frame=new CharacterView(this.heals2Mac,128,64);			this.heals2Frame.x=352;			this.heals2Frame.y=128;			this.heals2Frame.width=128;			this.heals2Frame.height=64;			addChild(this.heals2Frame);		}		internal function createControler():void {			trace("QuestrianApp:createControler()");			this.questMac=new StateMachine(0);			this.questEngine=new GameEngine(this.questMac);		}	}// end class}// end package