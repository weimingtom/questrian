/*Copyright 2009 by John Pavley. All rights reserved.*/package com.questrian{	import flash.display.*;	import flash.events.*;	import flash.geom.*;	import flash.text.*;	import fl.controls.*;	/*	A CharacterView visually represents character on the stage.	*/	public class CharacterView extends Sprite {		internal var stateMac:StateMachine;		internal var w:Number=0;		internal var h:Number=0;		internal var ANGLE_90_RAD:Number=Math.PI/2;		internal var LABEL_FONT_SIZE:Number=12;		internal var LABEL_LETER_SPACING:Number=-0.55;		internal var titleText:TextField;		internal var titleFormat:TextFormat;		internal var healthText:TextField;		internal var healthBar:ProgressBar;				internal var manaText:TextField;		internal var manaBar:ProgressBar;		internal var xpText:TextField;		internal var xpBar:ProgressBar;		internal var labelFormat:TextFormat;		public function CharacterView(stateMac:StateMachine, w:Number, h:Number):void {			trace("CharacterView()");			this.stateMac=stateMac;			this.w=w;			this.h=h;			this.titleText = new TextField();			this.titleFormat = new TextFormat();			this.titleText.text=this.stateMac.getValueByKey("name");			this.healthText = new TextField();			this.healthText.text="Health:";			this.manaText = new TextField();			this.manaText.text="Mana:";			this.xpText = new TextField();			this.xpText.text="Exp:";			this.labelFormat = new TextFormat();			draw();			super();		}		public function draw():void {			trace("CharacerView:Draw()");			graphics.clear();			this.drawBackground();			this.drawTitleText();			this.createLabelFormat();			this.drawHealthText();			this.drawHealthBar();			this.drawManaText();			this.drawManaBar();			this.drawXpText();			this.drawXpBar();		}				internal function drawBackground():void {			var fillType:String=GradientType.LINEAR;			var colors:Array;			if (this.stateMac.getValueByKey("faction")=="friend") {				var colors=[0x000000,0x99FFFF];			} else {				var colors=[0x000000,0xFF99FF];			}			var alphas:Array=[1,1];			var ratios:Array=[0x00,0xFF];			var matr:Matrix = new Matrix();			matr.createGradientBox(50, 50, ANGLE_90_RAD, 0, 0);			var spreadMethod:String=SpreadMethod.PAD;			this.graphics.beginGradientFill(fillType, colors, alphas, ratios, matr, spreadMethod);			graphics.drawRect(0, 0, w, h);		}		internal function drawTitleText():void {			this.titleText.autoSize=TextFieldAutoSize.LEFT;			this.titleText.x=0;			this.titleText.y=0;			this.titleFormat.font="Bank Gothic Medium";			if (this.stateMac.getValueByKey("faction")=="friend") {				this.titleFormat.color=0x33FF33;			} else {				this.titleFormat.color=0xFFFF33;			}			this.titleFormat.size=LABEL_FONT_SIZE;			this.titleFormat.letterSpacing=LABEL_LETER_SPACING;			this.titleText.setTextFormat(this.titleFormat);			addChild(this.titleText);		}		internal function createLabelFormat():void {			this.labelFormat.font="Bank Gothic Medium";			this.labelFormat.color=0x000000;			this.labelFormat.size=LABEL_FONT_SIZE;			this.labelFormat.letterSpacing=LABEL_LETER_SPACING;			this.labelFormat.align=TextFormatAlign.RIGHT;		}		internal function drawHealthText():void {			this.healthText.width=52;			this.healthText.height=14;			this.healthText.x=0;			this.healthText.y=15;			this.healthText.setTextFormat(this.labelFormat);			addChild(this.healthText);		}		public function drawHealthBar():void {			this.healthBar = new ProgressBar();			this.healthBar.move(55, 20);			this.healthBar.setSize(65, 8);			this.healthBar.mode = ProgressBarMode.MANUAL;			this.healthBar.setProgress(50, 100);			addChild(this.healthBar);		}		internal function drawManaText():void {			this.manaText.width=52;			this.manaText.height=14;			this.manaText.x=0;			this.manaText.y=30;			this.manaText.setTextFormat(this.labelFormat);			addChild(this.manaText);		}		public function drawManaBar():void {			this.manaBar = new ProgressBar();			this.manaBar.move(55, 35);			this.manaBar.setSize(65, 8);			this.manaBar.mode = ProgressBarMode.MANUAL;			this.manaBar.setProgress(75, 100);			addChild(this.manaBar);		}		internal function drawXpText():void {			this.xpText.width=52;			this.xpText.height=14;			this.xpText.x=0;			this.xpText.y=45;			this.xpText.setTextFormat(this.labelFormat);			addChild(this.xpText);		}				public function drawXpBar():void {			this.xpBar = new ProgressBar();			this.xpBar.move(55, 50);			this.xpBar.setSize(65, 8);			this.xpBar.mode = ProgressBarMode.MANUAL;			this.xpBar.setProgress(100, 100);			addChild(this.xpBar);		}	}//end class}// end package